#include <stdio.h>
#include <queue>
#include <vector>
#define INF 1e9
using namespace std;

int V, E, K; // V: ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½, E: ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½, K: ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½È£
vector<pair<int,int>> graph[20001]; // ï¿½ï¿½ ï¿½ï¿½å¿? ï¿½ï¿½ï¿½ï¿½Ç¾ï¿? ï¿½Ö´ï¿½ ï¿½ï¿½å¿? ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿? ï¿½è¿­ (pait<ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?, ï¿½Å¸ï¿½>)
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // ï¿½Ö¼ï¿½ ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ Ã£ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ì¼±ï¿½ï¿½ï¿½ï¿½ Å¥(pair<ï¿½Å¸ï¿½, ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?>)
int value[20001]; // ï¿½Ö´Ü°Å¸ï¿½ ï¿½ï¿½ï¿½Ìºï¿½

int main() {
  scanf("%d %d", &V, &E);
  scanf("%d", &K);

  // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ô·ï¿½ ï¿½Þ±ï¿½
  for (int i = 0; i < E; i++) {
    int u, v, w;
    scanf("%d %d %d", &u, &v, &w);
    graph[u].push_back(make_pair(v,w));
  }

  // ï¿½Ö´Ü°Å¸ï¿½ ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ê±ï¿½È­
  for (int i = 1; i <= V; i++) {
    value[i] = INF;
  }

  value[K] = 0; // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ -> ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Å¸ï¿½ï¿½ï¿½ 0ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½

  pq.push(make_pair(0,K));

  while(!pq.empty()) {
    int x = pq.top().first; // ï¿½Å¸ï¿½
    int u = pq.top().second; // ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?
    pq.pop();

    for (int i = 0; i < graph[u].size(); i++) {
      int v = graph[u][i].first;
      int w = graph[u][i].second;

      if(x + w <value[v]) {
        value[v] = x + w;
        pq.push(make_pair(x+w, v));
      }
    }
  }

  for (int i = 1; i <= V; i++) {
    if (value[i] == INF) printf("INF\n");
    else printf("%d\n", value[i]);
  }
  
  return 0;

}